#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to preprocess the plaintext (remove spaces, make uppercase)
void preprocess(char plaintext[], char processedText[]) {
    int i, j = 0;
    for (i = 0; plaintext[i] != '\0'; i++) {
        if (isalpha(plaintext[i])) {
            processedText[j++] = toupper(plaintext[i]);
        }
    }
    processedText[j] = '\0';
}

// Function to generate the Playfair matrix
void generateMatrix(char key[], char matrix[5][5]) {
    int i, j, k = 0;
    int used[26] = {0}; // to keep track of used letters
    for (i = 0; key[i] != '\0'; i++) {
        if (!used[key[i] - 'A']) {
            matrix[k / 5][k % 5] = key[i];
            used[key[i] - 'A'] = 1;
            k++;
        }
    }

    // Fill the matrix with the remaining letters
    for (i = 0; i < 26; i++) {
        if (i != ('J' - 'A') && !used[i]) {
            matrix[k / 5][k % 5] = 'A' + i;
            k++;
        }
    }
}

// Function to encrypt plaintext using the Playfair cipher
void encrypt(char plaintext[], char key[], char ciphertext[]) {
    char matrix[5][5];
    preprocess(plaintext, plaintext);
    generateMatrix(key, matrix);

    int i, j, k = 0;
    while (plaintext[k] != '\0') {
        char a = plaintext[k++];
        char b = plaintext[k++];
        int row1, col1, row2, col2;
        
        // Find positions of a and b in the matrix
        for (i = 0; i < 5; i++) {
            for (j = 0; j < 5; j++) {
                if (matrix[i][j] == a) {
                    row1 = i;
                    col1 = j;
                }
                if (matrix[i][j] == b) {
                    row2 = i;
                    col2 = j;
                }
            }
        }

        if (row1 == row2) {
            // Same row, shift right
            ciphertext[strlen(ciphertext)] = matrix[row1][(col1 + 1) % 5];
            ciphertext[strlen(ciphertext)] = matrix[row2][(col2 + 1) % 5];
        } else if (col1 == col2) {
            // Same column, shift down
            ciphertext[strlen(ciphertext)] = matrix[(row1 + 1) % 5][col1];
            ciphertext[strlen(ciphertext)] = matrix[(row2 + 1) % 5][col2];
        } else {
            // Form a rectangle, swap columns
            ciphertext[strlen(ciphertext)] = matrix[row1][col2];
            ciphertext[strlen(ciphertext)] = matrix[row2][col1];
        }
    }
    ciphertext[strlen(ciphertext)] = '\0';
}

int main() {
    char plaintext[1000];
    char key[100];
    char ciphertext[1000];

    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    printf("Enter the key: ");
    fgets(key, sizeof(key), stdin);

    encrypt(plaintext, key, ciphertext);

    printf("Encrypted Text: %s\n", ciphertext);

    return 0;
}
