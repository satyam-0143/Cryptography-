#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <math.h>

// Function to calculate the greatest common divisor (GCD) of two numbers
int gcd(int a, int b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

// Function to check if a number is prime
int isPrime(int n) {
    if (n <= 1)
        return 0;
    if (n <= 3)
        return 1;
    if (n % 2 == 0 || n % 3 == 0)
        return 0;
    for (int i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0)
            return 0;
    }
    return 1;
}

// Function to generate a random prime number
int generatePrime() {
    int prime;
    do {
        prime = rand() % 100 + 50; // Adjust the range as needed
    } while (!isPrime(prime));
    return prime;
}

// Function to calculate the modular inverse using the extended Euclidean algorithm
int modInverse(int a, int m) {
    int m0 = m, t, q;
    int x0 = 0, x1 = 1;

    if (m == 1)
        return 0;

    while (a > 1) {
        q = a / m;
        t = m;
        m = a % m;
        a = t;

        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }

    if (x1 < 0)
        x1 += m0;

    return x1;
}

int main() {
    int p, q, n, phi, e, d;
    char plaintext;
    int ciphertext, decryptedText;

    // Step 1: Generate two random prime numbers p and q
    p = generatePrime();
    q = generatePrime();

    // Step 2: Calculate n and phi(n)
    n = p * q;
    phi = (p - 1) * (q - 1);

    // Step 3: Choose an encryption key e (usually a small prime number)
    e = 17; // A common choice for simplicity

    // Step 4: Calculate the decryption key d using the modular inverse of e
    d = modInverse(e, phi);

    printf("Public Key (e, n): (%d, %d)\n", e, n);
    printf("Private Key (d, n): (%d, %d)\n", d, n);

    printf("Enter a character to encrypt: ");
    scanf("%c", &plaintext);

    // Step 5: Encrypt the plaintext
    ciphertext = pow(plaintext, e);
    ciphertext = ciphertext % n;

    printf("Ciphertext: %d\n", ciphertext);

    // Step 6: Decrypt the ciphertext
    decryptedText = pow(ciphertext, d);
    decryptedText = decryptedText % n;

    printf("Decrypted Text: %c\n", decryptedText);

    return 0;
}
